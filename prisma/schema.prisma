generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  mfaEnabled    Boolean   @default(false)
  mfaSecret     String?
  anonymizeData Boolean   @default(false)
  cases         Case[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  feedback     UserFeedback[]
  subscription  Subscription?
  payments      Payment[]
  supportTickets SupportTicket[]
  legalAidRequests LegalAidRequest[]
  forumPosts       ForumPost[]
  lastActive DateTime?
}

model Case {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  documents   Document[]
  tasks       Task[]
  milestones  Milestone[]
  type String
  outcome Boolean?
}

model Document {
  id        String   @id @default(cuid())
  caseId    String
  case      Case     @relation(fields: [caseId], references: [id])
  name      String
  fileUrl   String
  uploadedAt DateTime @default(now())
}

model Task {
  id          String   @id @default(cuid())
  caseId      String
  case        Case     @relation(fields: [caseId], references: [id])
  title       String
  description String
  status      String
  assignedTo  String?
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Milestone {
  id          String   @id @default(cuid())
  caseId      String
  case        Case     @relation(fields: [caseId], references: [id])
  title       String
  description String
  dueDate     DateTime
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserFeedback {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  feedback  String
  createdAt DateTime @default(now())
}

model Subscription {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id])
  plan          String
  status        String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  amount        Float
  currency      String
  status        String
  type          String
  createdAt     DateTime @default(now())
}

model Partnership {
  id            String   @id @default(cuid())
  name          String
  type          String
  discountPercentage Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SupportTicket {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  email     String
  issue     String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LegalAidRequest {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  legalIssue  String
  location    String
  description String
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ForumPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LegalProfessional {
  id             String   @id @default(cuid())
  name           String
  specialization String
  location       String
  rating         Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

